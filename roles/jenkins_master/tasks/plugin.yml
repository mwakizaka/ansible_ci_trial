---
- name: Install plugins without a specific version
  jenkins_plugin:
    name: "{{ item.key }}"
    params: "{{jenkins_params}}" 
    validate_certs: False
    with_dependencies: True 
  register: jenkins_plugin_unversioned
  when: >
    'version' not in item.value
  with_dict: "{{ jenkins_plugins }}"

- name: Install plugins with a specific version
  jenkins_plugin:
    name: "{{ item.key }}"
    params: "{{jenkins_params}}" 
    version: "{{ item.value['version'] }}"
    validate_certs: False
    with_dependencies: True 
  register: jenkins_plugin_versioned
  when: >
    'version' in item.value
  with_dict: "{{ jenkins_plugins }}"

- name: Initiate the fact
  set_fact:
    jenkins_restart_required: no

- name: Check if restart is required by any of the versioned plugins
  set_fact:
    jenkins_restart_required: yes
  when: item.changed
  with_items: "{{ jenkins_plugin_versioned.results }}"

- name: Check if restart is required by any of the unversioned plugins
  set_fact:
    jenkins_restart_required: yes
  when: item.changed
  with_items: "{{ jenkins_plugin_unversioned.results }}"

- name: Restart jenkins
  include: restart_jenkins.yml
  when: jenkins_restart_required

- name: Wait for jenkins up
  include: wait_for_jenkins_up.yml
  when: jenkins_restart_required

- name: Reset the fact
  set_fact:
    jenkins_restart_required: no
  when: jenkins_restart_required

- name: Plugin pinning
  jenkins_plugin:
    name: "{{ item.key }}"
    state: "{{ 'pinned' if item.value['pinned'] else 'unpinned'}}"
    params: "{{jenkins_params}}" 
  when: >
    'pinned' in item.value
  with_dict: "{{ jenkins_plugins }}"

- name: Plugin enabling
  jenkins_plugin:
    name: "{{ item.key }}"
    state: "{{ 'enabled' if item.value['enabled'] else 'disabled'}}"
    params: "{{jenkins_params}}" 
  when: >
    'enabled' in item.value
  with_dict: "{{ jenkins_plugins }}"

